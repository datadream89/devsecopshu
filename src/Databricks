import java.io.{File, FileInputStream}
import scala.io.Source

class IniFileParser {
  def parseIniFile(file: File): Map[String, Map[String, String]] = {
    val lines = Source.fromInputStream(new FileInputStream(file)).getLines().toList
    val sections = lines.filter(_.startsWith("["))
    val sectionValues = sections.map { section =>
      val sectionName = section.substring(1, section.length - 1)
      val sectionLines = lines.dropWhile(_ != section).drop(1).takeWhile(!_.startsWith("["))
      val keyValues = sectionLines.map { line =>
        val keyValue = line.split("=", 2)
        (keyValue(0).trim, keyValue(1).trim)
      }
      (sectionName, keyValues.toMap)
    }
    sectionValues.toMap
  }

  def retrieveInfoFromIniFiles(folderPath: String): Map[String, Map[String, Map[String, String]]] = {
    val folder = new File(folderPath)
    val iniFiles = folder.listFiles.filter(_.getName.endsWith(".ini"))

    val infoMap = scala.collection.mutable.Map[String, Map[String, Map[String, String]]]()

    iniFiles.foreach { file =>
      val fileKeyValues = parseIniFile(file)
      val sectionInfoMap = scala.collection.mutable.Map[String, Map[String, String]]()

      fileKeyValues.foreach { case (section, keyValues) =>
        val queryKey = keyValues.getOrElse("queryKey", "")
        val tin = keyValues.getOrElse("tin", "")
        val tout = keyValues.getOrElse("tout", "")

        if (queryKey.nonEmpty || tin.nonEmpty || tout.nonEmpty) {
          sectionInfoMap.getOrElseUpdate(section, Map.empty) += ("queryKey" -> queryKey, "tin" -> tin, "tout" -> tout)
        }
      }

      infoMap(file.getName) = sectionInfoMap.toMap
    }

    infoMap.toMap
  }
}

val folderPath = "/path/to/folder"  // Specify the folder path containing .ini files
val parser = new IniFileParser()
val infoMap = parser.retrieveInfoFromIniFiles(folderPath)

// Print the query keys, tin, and tout for each section
infoMap.foreach { case (fileName, fileSectionInfo) =>
  println(s"File: $fileName")
  fileSectionInfo.foreach { case (section, info) =>
    println(s"Section: $section")
    println(s"Query Key: ${info.getOrElse("queryKey", "")}")
    println(s"Tin: ${info.getOrElse("tin", "")}")
    println(s"Tout: ${info.getOrElse("tout", "")}")
    println()
  }
}
