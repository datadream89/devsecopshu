from kubernetes import client, config
import time

def create_job_object(namespace, job_name, container_name, value):
    # Create a Kubernetes job object for a single container
    job = client.V1Job(api_version="batch/v1", kind="Job", metadata=client.V1ObjectMeta(name=job_name))
    container = client.V1Container(name=container_name, image="your-container-image")
    container.env = [client.V1EnvVar(name="VALUE", value=value)]  # Pass the value as an environment variable
    container_command = ["your-container-command"]
    container.command = container_command
    job.spec = client.V1JobSpec(template=client.V1PodTemplateSpec(spec=client.V1PodSpec(restart_policy="Never", containers=[container])))
    return job

def create_jobs(namespace, job_base_name, container_name, values):
    # Create and submit multiple jobs
    api_instance = client.BatchV1Api()
    for i, value in enumerate(values):
        job_name = f"{job_base_name}-{i}"
        job = create_job_object(namespace, job_name, container_name, value)
        api_instance.create_namespaced_job(namespace=namespace, body=job)
        print(f"Job '{job_name}' with value '{value}' submitted.")

def are_containers_complete(namespace, job_base_name, num_jobs):
    # Load the Kubernetes configuration (assuming you are running this code inside a Kubernetes cluster)
    config.load_incluster_config()

    # Alternatively, if you are running this code outside the cluster, use the following line instead:
    # config.load_kube_config()

    # Create the Kubernetes API client
    api_instance = client.CoreV1Api()

    # Check if all jobs are complete
    for i in range(num_jobs):
        job_name = f"{job_base_name}-{i}"
        try:
            job = api_instance.read_namespaced_job(name=job_name, namespace=namespace)
        except Exception as e:
            print(f"Error while fetching job '{job_name}': {e}")
            return False

        if job.status.succeeded is None or job.status.succeeded == 0:
            return False

    return True

# Example usage:
if __name__ == "__main__":
    namespace = "your-namespace"
    num_jobs = 3
    num_containers = 5
    values_list = [f"value{i}" for i in range(num_containers)]

    job_base_name = "your-job-base-name"
    container_name = "your-container-name"

    create_jobs(namespace, job_base_name, container_name, values_list)
    
    while not are_containers_complete(namespace, job_base_name, num_jobs):
        print("Containers are still running...")
        time.sleep(10)
    
    print("All containers are complete!")
