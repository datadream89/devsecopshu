import org.ini4j.{Ini, IniPreferences}

import java.io.{File, FileReader}
import java.util.prefs.Preferences

class IniFileParser {
  def parseIniFile(file: File): Map[String, Map[String, String]] = {
    val ini = new Ini(new FileReader(file))
    val preferences = new IniPreferences(ini)

    val sectionValues = ini.keySet().toArray.map { sectionName =>
      val section = preferences.node(sectionName.toString)
      section.keys().toArray.map { key =>
        key.toString -> section.get(key.toString, "")
      }.toMap
    }

    ini.keySet().toArray.zip(sectionValues).map { case (sectionName, sectionValues) =>
      sectionName.toString -> sectionValues
    }.toMap
  }

  def retrieveInfoFromIniFiles(folderPath: String): Map[String, Map[String, Map[String, String]]] = {
    val folder = new File(folderPath)
    val iniFiles = folder.listFiles.filter(_.getName.endsWith(".ini"))

    val infoMap = scala.collection.mutable.Map[String, Map[String, Map[String, String]]]()

    iniFiles.foreach { file =>
      val fileKeyValues = parseIniFile(file)
      val fileName = file.getName.stripSuffix(".ini")
      infoMap(fileName) = fileKeyValues
    }

    infoMap.toMap
  }
}

val folderPath = "/path/to/folder" // Specify the folder path containing .ini files
val parser = new IniFileParser()
val infoMap = parser.retrieveInfoFromIniFiles(folderPath)

// Print the content of the two sample .ini files
infoMap.foreach { case (fileName, sections) =>
  println(s"File: $fileName")
  sections.foreach { case (section, keyValues) =>
    println(s"Section: $section")
    keyValues.foreach { case (key, value) =>
      println(s"Key: $key, Value: $value")
    }
    println()
  }
}
