import java.io.File
import java.nio.file.{Files, Paths}

import com.typesafe.config.{Config, ConfigFactory}

object ConfigParser {
  def main(args: Array[String]): Unit = {
    val folderPath = "configs/" // Update the folder path as needed

    val configFileNames: List[String] = getListOfConfigFiles(folderPath)

    // Parse each config file and extract sections dynamically
    for (configFile <- configFileNames) {
      val config: Config = ConfigFactory.parseFile(new File(configFile))
      val sections: Set[String] = config.root().keySet().toArray.map(_.toString).toSet

      for (section <- sections) {
        try {
          val value = config.getString(s"$section.key") // Assuming a common key "key" in each section
          println(s"[$configFile][$section] key: $value")
        } catch {
          case _: Exception =>
            println(s"[$configFile][$section] key not found")
        }
      }
    }
  }

  def getListOfConfigFiles(folderPath: String): List[String] = {
    val folder = new File(folderPath)
    if (folder.exists() && folder.isDirectory) {
      folder.listFiles().filter(_.isFile).map(_.getAbsolutePath).toList
    } else {
      throw new IllegalArgumentException("Invalid folder path")
    }
  }
}
