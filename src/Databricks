import java.io.File
import com.typesafe.config.{Config, ConfigFactory}
import scala.collection.JavaConverters._

object ConfigParser {
  def main(args: Array[String]): Unit = {
    val folderPath = "configs/" // Update the folder path as needed

    val configFileNames: List[String] = getListOfConfigFiles(folderPath)

    // Parse each config file and extract sections and their values dynamically
    for (configFile <- configFileNames) {
      val config: Config = ConfigFactory.parseFile(new File(configFile))

      config.root().keySet().asScala.foreach { section =>
        val values = config.getStringList(section).asScala.toList
        if (values.length >= 2) {
          val secondValue = values(1)
          processSection(section, secondValue)
        } else {
          processSection(section, "No second value")
        }
      }
    }
  }

  def processSection(section: String, secondValue: String): Unit = {
    // Here, you can define your function and pass the section and secondValue as arguments
    println(s"Processing section: $section with second value: $secondValue")
  }

  def getListOfConfigFiles(folderPath: String): List[String] = {
    val folder = new File(folderPath)
    if (folder.exists() && folder.isDirectory) {
      folder.listFiles().filter(_.isFile).map(_.getAbsolutePath).toList
    } else {
      throw new IllegalArgumentException("Invalid folder path")
    }
  }
}
